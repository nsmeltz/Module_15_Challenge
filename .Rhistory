knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
schools <- students["school_name"]
View(schools)
# Use length() to identify the number of schools
num_schools <- length(schools)
print(num_Schools)
print(num_schools)
# Use length() to identify the number of schools
print(length(schools))
View(schools)
# Use length() to identify the number of schools
student_count < - print(length(schools))
length(schools)
length(schools')
end
setwd("C:/Users/Nat/DataAnalyticsBootcamp/Module_15/Module_15_Challenge")
# import dependencies
library(dplyr)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
headers <- names(mechacar)
View(mechacar)
# import dependencies
library(tidyverse)
library(dplyr)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
headers <- names(mechacar)
# Linear Regression
mechacar_model <- lm(formula = mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
summary(mechacar_model)
# Linear Regression
lm(formula = mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# import dependencies
library(tidyverse)
library(dplyr)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
headers <- names(mechacar)
# import dependencies
library(tidyverse)
library(dplyr)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
lm(formula = mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# Linear Regression
model <- lm(formula = mpg~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine pvalue and r^2
summary(model)
# plot linear regression
plot(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# plot linear regression
plot(mpg ~ vehicle_length , data = mechacar)
# plot linear regression
ggplot(mechacar, aes(x = mpg, y = vehicle_length)) +
geom_point(aes(shape = AWD))
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg)) +
geom_point(aes(shape = AWD))
geom_point(aes(color = blue)
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg)) +
geom_point(fill = blue)
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg)) +
geom_point(fill = "blue")
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg)) +
geom_point(fill = "blue", color = "blue")
# plot linear regression
ggplot(mechacar, aes(x = value, y = mpg, color = variable)) +
geom_point(aes(x = vehicle_length, col = "vehicle_length"))
View(mechacar)
# plot linear regression
ggplot(mechacar, aes(x = value, y = mpg, color = variable)) +
geom_point(aes(x = Vehicle Length, col = "vehicle_length"))
v
# import dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
model <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine pvalue and r^2
summary(model)
# plot linear regression
ggplot(mechacar, aes(x = value, y = mpg, color = variable)) +
geom_point(aes(x = vehicle_length, col = "vehicle_length"))
# plot linear regression
ggplot(mechacar, aes(x = value, y = mpg, color = variable)) +
geom_point(aes(x = vehicle_length, col = "vehicle_length")) +
geom_point(aes(x = vehicle_weight, col = "vehicle_weight"))
# plot linear regression
p1 < -ggplot(mechacar, aes(x = vehicle_length, y = mpg, color = "blue" ) )
# plot linear regression
p1 <- ggplot(mechacar, aes(x = vehicle_length, y = mpg, color = "blue" ) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg, color = "blue" ) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg, data = mechacar,  color = "blue" ) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg, data = mechacar) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg, data = mechacar) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) )
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) ) +
geom_point()
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) ) +
geom_point(aes(color = "blue"))
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) ) +
geom_point()
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) ) +
geom_point() +
abline(model)
View(p1)
# import dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
model <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine pvalue and r^2
summary(model)
# plot linear regression
ggplot(mechacar, aes(x = vehicle_length, y = mpg) ) +
geom_point() +
abline(model)
ggplotRegression(lm(mpg ~ vehicle_length, data = mechacar))
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(lm(mpg ~ vehicle_length, data = mechacar))
# import dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
model <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine pvalue and r^2
summary(model)
# ---------------------- MechaCar Suspension Coils ------------------------
# read in dataset
suspension <- read.csv(file = 'Data/Suspension_Coil.csv')
View(suspension)
total_summary <- summarise(suspension)
View(total_summary)
total_summary <- summarize(suspension)
View(total_summary)
View(suspension)
View(suspension)
total_summary <- suspension %>% summarize(Mean = mean(PSI))
View(total_summary)
total_summary <- suspension %>% summarize(Mean = mean(PSI), Median = median(PSI)
View(total_summary)
total_summary <-
suspension %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
View(suspension)
# PSI data summary by lot
lot_summary <-
suspension %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
View(lot_summary)
# import dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
# -------------------------- MechaCar prototypes ----------------------------
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
model <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine p-value and r^2
summary(model)
# ---------------------- MechaCar Suspension Coils ------------------------
# read in dataset
suspension <- read.csv(file = 'Data/Suspension_Coil.csv')
# PSI data summary
total_summary <-
suspension %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
# PSI data summary by lot
lot_summary <-
suspension %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
View(total_summary)
View(lot_summary)
View(total_summary)
View(lot_summary)
View(total_summary)
View(total_summary)
total_summary$Mean
# PSI across all manufacturing lots vs the population mean of 1,500 pounds per square inch.
t.test(suspension$PSI, mu = total_summary$Mean)
View(lot_summary)
?t.test
View(suspension)
# Lot 1 PSI vs the population mean
lot1 <- suspension %>% filter(Manufacturing_Lot == "Lot1")
View(lot1)
t.test(lot1$PSI, mu= total_summary$Mean)
t.test(lot2$PSI, mu= total_summary$Mean)
# Lot 2 PSI vs the population mean
lot2 <- suspension %>%
filter(Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu= total_summary$Mean)
# Lot 3 PSI vs the population mean
lot3 <- suspension %>%
filter(Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu= total_summary$Mean)
# import dependencies
library(tidyverse)
library(dplyr)
library(ggplot2)
# -------------------------- MechaCar prototypes ----------------------------
# Read in MechaCar Data
mechacar <- read.csv(file = 'Data/MechaCar_mpg.csv')
# Linear Regression
model <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD , data = mechacar)
# determine p-value and r^2
summary(model)
# ---------------------- MechaCar Suspension Coils ------------------------
# read in dataset
suspension <- read.csv(file = 'Data/Suspension_Coil.csv')
# PSI data summary
total_summary <-
suspension %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
# PSI data summary by lot
lot_summary <-
suspension %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean = mean(PSI), Median = median(PSI), Variance= var(PSI), SD=sd(PSI))
# PSI across all manufacturing lots vs the population mean
t.test(suspension$PSI, mu = total_summary$Mean)
# Lot 1 PSI vs the population mean
lot1 <- suspension %>%
filter(Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu= total_summary$Mean)
# Lot 2 PSI vs the population mean
lot2 <- suspension %>%
filter(Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu= total_summary$Mean)
# Lot 3 PSI vs the population mean
lot3 <- suspension %>%
filter(Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu= total_summary$Mean)
